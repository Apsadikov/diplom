#!/usr/bin/env node

/**
 * Module dependencies.
 */

function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}

(async function () {

    await sleep(20000);

    var app = require('../app');
    var debug = require('debug')('server:server');
    var http = require('http');

    /**
     * Get port from environment and store in Express.
     */

    var port = process.env.PORT;
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);
    require("../queue/rabbitmq-servers");

    const io = require('socket.io')(server, {transports: ["websocket"]})
    io.use((socket, next) => {
        socket.user_id = socket.handshake.query.user_id;
        socket.user_name = socket.handshake.query.user_name;
        next();
    });

    let rabbitMqServers = require("../queue/rabbitmq-servers");
    rabbitMqServers.createRabbitMqConsumerConnections();
    rabbitMqServers.createRabbitMqProducerConnection((message) => {
        message = JSON.parse(message.toString());
        if (message.type === "leave") {
            io.emit("leave", message.body);
        }
        if (message.type === "join") {
            if (message.body.receiver_user_id) {
                io.to(message.body.receiver_user_id).emit("join", message.body);
            } else {
                io.emit("join", message.body);
            }
        }
        if (message.type === "message") {
            io.to(message.body.receiver_user_id).emit("message", message.body);
        }
    });

    io.on('connection', (socket) => {
        socket.join(socket.user_id);

        socket.on("disconnect", () => {
            rabbitMqServers.sendMessageAll({
                type: "leave",
                body: {
                    user_id: socket.user_id
                }
            });
        });

        socket.on("hello", function (message) {
            if (typeof message === "string") {
                message = JSON.parse(message);
            }
            if (message.receiver_user_id) {
                rabbitMqServers.sendMessage(message.receiver_user_id, {
                    type: "join",
                    body: {
                        user_id: socket.user_id,
                        user_name: socket.user_name,
                        receiver_user_id: message.receiver_user_id,
                        is_reply: true
                    }
                })
            } else {
                rabbitMqServers.sendMessageAll({
                    type: "join",
                    body: {
                        user_id: socket.user_id,
                        user_name: socket.user_name
                    }
                });
            }
        });

        socket.on("message", async function (message) {
            message = JSON.parse(message);
            message.sender_user_id = socket.user_id;
            rabbitMqServers.sendMessage(message.receiver_user_id, {
                type: "message",
                body: message
            });
        });

    });


    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }

})();